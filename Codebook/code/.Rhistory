logging <- read.csv("../Datasets/Logging.csv")
View(logging)
wilcox.test(logging, mu=mu0, conf.int = TRUE)
wilcox.test(logging, mu=muO, conf.int = TRUE)
wilcox.test(logging, alternative="less", conf.int = TRUE)
wilcox.test(PercentLost ~ Action, logging, alternative="less", conf.int = TRUE)
wilcox.test(PercentLost ~ Action, logging, alternative="greater", conf.int = TRUE)
a = c(6, 8, 2, 4, 4, 5)
b = c(7, 10, 4, 3, 5, 6)
wilcox.test(a,b, correct=FALSE)
wilcox.test(a,b)
wilcox.test(a,b, correct=FALSE)
wilcox.test(b,a, correct=FALSE)
sum.rank.a = sum(rank(c(a,b))[1:6]) #sum of ranks assigned to the group a
W = sum.rank.a â€“ (length(a)*(length(a)+1)) / 2
W = sum.rank.a - (length(a)*(length(a)+1)) / 2
W
sum.rank.b = sum(rank(c(a,b))[7:12]) #sum of ranks assigned to the group b
W = sum.rank.b - (length(b)*(length(b)+1)) / 2
W
sum(rank(c(a,b))[1:6]) #sum of ranks assigned to the group a
logging <- read.csv("../Datasets/Logging.csv")
a = subset(logging, Action="U")
b = subset(logging, Action="L")
a
a = subset(logging, Action=="U")
a
b = subset(logging, Action == "L")
b
wilcox.test(a,b, correct=FALSE)
wilcox.test(a$PercentLost,b$PercentLost, correct=FALSE)
wilcox.test(b$PercentLost,a$PercentLost, correct=FALSE)
# The value W is so computed:
sum.rank.a = sum(rank(c(a,b))[1:6]) #sum of ranks assigned to the group a
a = subset(logging$PercentLost, Action == "U")
?subset
a = subset(logging, Action == "U", select = logging$PercentLost)
a = subset(logging, Action == "U", select = PercentLost)
a
a = subset(logging, Action == "U", select = PercentLost)
b = subset(logging, Action == "L", select = PercentLost)
wilcox.test(a, correct=FALSE)
a
logging
b
wilcox.test(a, correct=FALSE)
class(a)
levels(a)
a
b = as.numeric(subset(logging, Action == "L", select = PercentLost))
levels(logging)
class(logging)# The value W is so computed:
wilcox.test(a,b, correct=FALSE)
a = subset(logging, Action == "U", select = PercentLost)
b = subset(logging, Action == "L", select = PercentLost)
wilcox.test(a,b, correct=FALSE)
a = data.frame(subset(logging, Action == "U", select = PercentLost))
a = data.frame(subset(logging, Action == "U", select = PercentLost))
b = data.frame(subset(logging, Action == "L", select = PercentLost))
wilcox.test(a,b, correct=FALSE)
logging <- read.csv("../Datasets/Logging.csv")
a = data.frame(subset(logging, Action == "U", select = PercentLost))
b = data.frame(subset(logging, Action == "L", select = PercentLost))
wilcox.test(a,b, correct=FALSE)
a
View(a)
a = data.frame(subset(logging, Action == "U", select = PercentLost, drop=TRUE))
b = data.frame(subset(logging, Action == "L", select = PercentLost, drop=TRUE))
a
wilcox.test(a,b,correct=FALSE)
logging <- read.csv("../Datasets/Logging.csv")
a = subset(logging, Action == "U", select = PercentLost)
a
a[1,1]
a[0,1]
a[0,2]
a = vector(subset(logging, Action == "U", select = PercentLost))
a = (subset(logging, Action == "U", select = PercentLost))[,1]
a
b = (subset(logging, Action == "L", select = PercentLost))[,1]
wilcox.test(a,b,correct=FALSE)
wilcox.test(b,a, correct=FALSE)
# The value W is so computed:
sum.rank.a = sum(rank(c(a,b))[1:6]) #sum of ranks assigned to the group a
W = sum.rank.a - (length(a)*(length(a)+1)) / 2
W
# The value W is so computed:
sum.rank.a = sum(rank(c(a,b))[1:7]) #sum of ranks assigned to the group a
W = sum.rank.a - (length(a)*(length(a)+1)) / 2
W
sum.rank.b = sum(rank(c(a,b))[8:16]) #sum of ranks assigned to the group b
W = sum.rank.b - (length(b)*(length(b)+1)) / 2
W
sum(rank(c(a,b))[1:7]) #sum of ranks assigned to the group a
sum(rank(c(a,b))[8:16]) #sum of ranks assigned to the group b
wilcox.test(PercentLost ~ Action, logging, alternative="greater", conf.int = TRUE)
logging <- read.csv("../Datasets/Logging.csv")
a = (subset(logging, Action == "U", select = PercentLost))[,1]
b = (subset(logging, Action == "L", select = PercentLost))[,1]
wilcox.test(a,b,correct=FALSE)
wilcox.test(b,a, correct=FALSE)
# The value W is so computed:
sum.rank.a = sum(rank(c(a,b))[1:7]) #sum of ranks assigned to the group a
W = sum.rank.a - (length(a)*(length(a)+1)) / 2
W
sum.rank.b = sum(rank(c(a,b))[8:16]) #sum of ranks assigned to the group b
W = sum.rank.b - (length(b)*(length(b)+1)) / 2
W
sum(rank(c(a,b))[1:7]) #sum of ranks assigned to the group a
sum(rank(c(a,b))[8:16]) #sum of ranks assigned to the group b
logging <- read.csv("../Datasets/Logging.csv")
wilcox.test(PercentLost ~ Action, logging, alternative="greater", conf.int = TRUE)
a = (subset(logging, Action == "U", select = PercentLost))[,1]
b = (subset(logging, Action == "L", select = PercentLost))[,1]
wilcox.test(a,b,correct=FALSE)
wilcox.test(b,a, correct=FALSE)
sum(rank(c(a,b))[1:7]) #sum of ranks assigned to the group a
sum(rank(c(a,b))[8:16]) #sum of ranks assigned to the group b
#One-sided rank sum test
wilcox.test(PercentLost ~ Action, logging, alternative="lower", conf.int = TRUE)
#One-sided rank sum test
wilcox.test(PercentLost ~ Action, logging, alternative="less", conf.int = TRUE)
#One-sided rank sum test
wilcox.test(PercentLost ~ Action, logging, alternative="greater", conf.int = TRUE)
#two-sided
a = (subset(logging, Action == "U", select = PercentLost))[,1]
b = (subset(logging, Action == "L", select = PercentLost))[,1]
wilcox.test(a,b,correct=FALSE)
wilcox.test(b,a, correct=FALSE)
# The value W is so computed:
sum.rank.a = sum(rank(c(a,b))[1:7]) #sum of ranks assigned to the group a
W = sum.rank.a - (length(a)*(length(a)+1)) / 2
W
sum.rank.b = sum(rank(c(a,b))[8:16]) #sum of ranks assigned to the group b
W = sum.rank.b - (length(b)*(length(b)+1)) / 2
W
sum(rank(c(a,b))[1:7]) #sum of ranks assigned to the group a
sum(rank(c(a,b))[8:16]) #sum of ranks assigned to the group b
EDU <- read.csv("../Datasets/EducationData.csv")
levels(EDU)
colnames(EDU)
t.test(Income2005 ~ Educ, data=EDU,
var.equal=FALSE,
conf.level=0.95)
?read.csv
View(EDU)
t.test(Income2005 ~ Educ, data=EDU,
var.equal=FALSE,
conf.level=0.90)
t.test(Income2005 ~ Educ, data=EDU,
var.equal=FALSE,
conf.level=0.95)
#Time to complete puzzle before yoga
before <- c(85, 70, 40, 65, 80, 75, 55, 20, 70)
#Time to complete puzzle after yoga
after <- c(75, 50, 50, 40, 20, 65, 40, 25, 30)
#Create a data frame
autism <- data.frame(
group = rep(c("before", "after"), each = 9),
time = c(before, after)
)
View(autism)
print(autism)
wilcox.test(before, after, paired = TRUE)
wilcox.test(after, before, paired = TRUE)
wilcox.test(before, after, paired = TRUE)
wilcox.test(before, after, paired = TRUE, alternative = "less")
wilcox.test(before, after, paired = TRUE, alternative = "greater")
#Time to complete puzzle before yoga
before <- c(85, 70, 40, 65, 80, 75, 55, 20, 70)
#Time to complete puzzle after yoga
after <- c(75, 50, 50, 40, 20, 65, 40, 25, 30)
wilcox.test(before, after, paired = TRUE, alternative = "greater")
?t.test
t.test(before, after, alternative = "greater", paired=TRUE)
dif <- before-after
diff
dif
?sort
sort(abs(dif))
ordered <- sort(abs(difference))
difference <- before-after
difference
ordered <- sort(abs(difference))
n <- num(ordered)
n <- size(ordered)
n <- length(ordered)
n
MeanS <- n(n+1)/4
MeanS <- (n*(n+1))/4
SDS <- sqrt((n*(n+1)*(2*n+1))/24)
Zstat <- (41-MeanS)/SDS
?p.value
?pt
print("Mean(S)")
print("Mean(S)=", MeanS)
print("Mean(S)=" MeanS)
?print
results <- c("Mean(S)=", MeanS)
results
results <- c("Mean(S)=" MeanS)
?paste
results <- paste("Mean(S)=", MeanS, sep=" ")
results
results <- paste("Mean(S)=", MeanS, "SD(S)=", SDS, "Z-statistic=", Zstat, sep=" ")
results
results
#Time to complete puzzle before yoga
before <- c(85, 70, 40, 65, 80, 75, 55, 20, 70)
#Time to complete puzzle after yoga
after <- c(75, 50, 50, 40, 20, 65, 40, 25, 30)
difference <- before-after
ordered <- sort(abs(difference))
n <- length(ordered)
MeanS <- (n*(n+1))/4
SDS <- sqrt((n*(n+1)*(2*n+1))/24)
Zstat <- (41-MeanS)/SDS
results <- paste("Mean(S)=", MeanS, "SD(S)=", SDS, "Z-statistic=", Zstat, sep=" ")
results
before <- c(85, 70, 40, 65, 80, 75, 55, 20, 70)
#Time to complete puzzle after yoga
after <- c(75, 50, 50, 40, 20, 65, 40, 25, 30)
t.test(before, after, alternative = "greater", paired=TRUE)
t.test(after, before, alternative = "less", paired=TRUE)
t.test(after, before, alternative = "less", paired=TRUE)
t.test(before, after, alternative = "greater", paired=TRUE)
?anova
?subset
